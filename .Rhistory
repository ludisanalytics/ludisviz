sessionInfo()
library(tidyverse)
library(plotly)
sessionInfo()
shiny::runApp('~/Desktop/Travis Data/player_comparison_across_leagues')
runApp('~/Desktop/Travis Data/player_group_comparison')
library(roxygen2)
library(ludisviz)
library(stringr)
library(dplyr)
library(plotly)
####################################################
################### Load Data ###################
####################################################
# Load data from Ludis s3 repository
data <- read.csv("https://ludis-rugby.s3.amazonaws.com/canon-eagles/trial_data.csv", check.names = FALSE)
####################################################
################### Helper Functions ###################
####################################################
# Returns the max number of tries for a match
maxTries <- function(match){
tries <- data %>% dplyr::filter(game == match) %>% dplyr::filter(str_ends(Stat, ".Try")) %>%
dplyr::group_by(Stat) %>%
dplyr::summarise(total = sum(Outcomes.Try, Outcomes.Pen.Try))
return(max(tries$total))
}
# Returns the max number of turnovers for a match
maxTurnovers <- function(match){
turnovers <- data %>% dplyr::filter(game == match) %>% dplyr::filter(str_ends(Stat, ".Turnovers.Con")) %>%
dplyr::group_by(Stat) %>%
dplyr::summarise(total = sum(Source.Of.Possession.Zones.Gold.Zone, Source.Of.Possession.Zones.Green.Zone, `Source.Of.Possession.Zones.Green-.Zone`, Source.Of.Possession.Zones.Red.Zone))
return(max(turnovers$total))
}
####################################################
################### Stat Visualization Functions: Match Level ###################
####################################################
# These functions enable users to visualize match stats for a team/opp
# Example uses
# Try Sources
ggplotly(stackMatch(df = formatDfByCol(dt = data,
match = "T01 - v. Kubota",
rowStat = c("Canon.Try"),
colStats = c("Source.Of.Possession.Lineout.Attack", "Source.Of.Possession.Scrum.Attack", "Source.Of.Possession.Turnover.Attack", "Source.Of.Possession.Counter.Attack", "Source.Of.Possession.Quick.Tap.Attack", "Source.Of.Possession.Restart.Reception"),
statNames = c("Lineout", "Scrum", "Turnover", "Counter", "Quick Tap", "Restarts")),
x_lab = "Try Source", y_lab = "Count",
visCols =  c("#ff8267", "#ef2a00", "#dcdcdc", "#a369ec", "#ffac9a", "#722bb5"),
y_lim = maxTries(match = "T01 - v. Kubota")),
tooltip = 'text') %>%
# Position legend
layout(legend = list(orientation = "h", xanchor = "center", x = 0.5, y = 1.25)) %>%
# Option to hide plotly logo
config(displaylogo = FALSE)
# Turnover Location
ggplotly(stackMatch(df = formatDfByCol(dt = data,
match = "T01 - v. Kubota",
rowStat = c(".Turnovers.Con"),
colStats = c("Source.Of.Possession.Zones.Gold.Zone", "Source.Of.Possession.Zones.Green.Zone", "Source.Of.Possession.Zones.Green-.Zone", "Source.Of.Possession.Zones.Red.Zone"),
statNames = c("Gold Zone", "Green Zone", "Green Zone-", "Red Zone")),
x_lab = "Turnover Location", y_lab = "Count",
visCols = c("#ffbe7e", "#8bd17e", "#b9b1ac", "#ff9c9a"),
y_lim = maxTurnovers(match = "T01 - v. Kubota")),
tooltip = 'text') %>%
# Position legend
layout(legend = list(orientation = "h", xanchor = "center", x = 0.5, y = 1.25)) %>%
# Option to hide plotly logo
config(displaylogo = FALSE)
# Ruck Speed
ggplotly(groupTeamMatch(df = formatDfByCol(dt = data,
match = "T01 - v. Kubota",
rowStat = ".Breakdown",
colStats = c("Ruck.Outcome.Ruck.Fast", "Ruck.Outcome.Ruck.Lost", "Ruck.Outcome.Ruck.Medium", "Ruck.Outcome.Ruck.Slow"),
statNames = c("LQB", "Lost", "Medium", "Slow")),
x_lab = "Ruck Speed", y_lab = "Count",
visCols =  c("#ff8267", "#cbebe5")),
tooltip = 'text') %>%
# Position legend
layout(legend = list(orientation = "h", xanchor = "center", x = 0.5, y = 1.25)) %>%
# Option to hide plotly logo
config(displaylogo = FALSE)
# Kick + Clean Breaks
ggplotly(groupTeamMatch(df = rbind(formatDf(dt = data,
match = "T01 - v. Kubota",
rowStat = ".Kicks.In.Play",
nStats = c("Half.1st", "Half.2nd"),
statName = "General Kicks"),
formatDf(dt = data,
match = "T01 - v. Kubota",
rowStat = ".Breaches",
nStats = c("Half.1st", "Half.2nd"),
statName = "Clean Breaks")),
x_lab = "", y_lab = "Count",
visCols =  c("#ff8267", "#cbebe5")),
tooltip = 'text') %>%
# Position legend
layout(legend = list(orientation = "h", xanchor = "center", x = 0.5, y = 1.25)) %>%
# Option to hide plotly logo
config(displaylogo = FALSE)
# 22m Conversions
ggplotly(groupTeamMatch(df = formatDf(dt = data,
match = "T01 - v. Kubota",
rowStat = ".22m.Entry",
nStats = "Score.Point",
dStats = c("Half.1st", "Half.2nd"),
statName = c("22m Conversions"),
valType = "percent"),
x_lab = "", y_lab = "Percentage (%)",
visCols =  c("#ff8267", "#cbebe5")),
tooltip = 'text') %>%
# Position legend
layout(legend = list(orientation = "h", xanchor = "center", x = 0.5, y = 1.25)) %>%
# Option to hide plotly logo
config(displaylogo = FALSE)
# Gold Entries off Set Piece
ggplotly(groupStatMatch(df = rbind(formatDf(dt = data,
match = "T01 - v. Kubota",
rowStat = ".Scrum",
nStats = "Gold.Entry",
dStats = c("Scrum.Quality.Lost", "Scrum.Quality.Won"),
statName = "Scrum",
valType = "fraction"),
formatDf(dt = data,
match = "T01 - v. Kubota",
rowStat = ".Lineout",
nStats = "Gold.Entry",
dStats = c("Lineout.Quality.Lost", "Lineout.Quality.Won"),
statName = "Lineout",
valType = "fraction")),
x_lab = "Set Piece", y_lab = "Count",
visCols =  c("#ff8267", "#a369ec",  "#cbebe5", "#476af6")),
tooltip = 'text') %>%
# Position legend
layout(legend = list(orientation = "h", xanchor = "center", x = 0.5, y = 1.25)) %>%
# Option to hide plotly logo
config(displaylogo = FALSE)
# Turnover Location
donutMatch(df = formatDfByCol(dt = data,
match = "T01 - v. Kubota",
rowStat = c("Canon.Turnovers.Con"),
colStats = c("Source.Of.Possession.Zones.Gold.Zone", "Source.Of.Possession.Zones.Green.Zone", "Source.Of.Possession.Zones.Green-.Zone", "Source.Of.Possession.Zones.Red.Zone"),
statNames = c("Gold Zone", "Green Zone", "Green Zone-", "Red Zone")),
x_lab = "Turnover Location", y_lab = "Count",
visCols = c("#ffbe7e", "#8bd17e", "#b9b1ac", "#ff9c9a"),
themeCol = "#000000", textCol = "#ffffff") %>%
# # Option to position legend
# layout(legend = list(orientation = "h", xanchor = "center", x = 0.5, y = 1.25)) %>%
# Option to hide plotly logo
config(displaylogo = FALSE)
####################################################
################### Stat Visualization Functions: Season Trend ###################
####################################################
# These functions enable users to visualize a team's stats for an entire season
# Example uses
# Try Source
ggplotly(stackTrend(df = formatDfByCol(dt = data,
trendTeam = "Canon",
rowStat = c("Canon.Try"),
colStats = c("Source.Of.Possession.Lineout.Attack", "Source.Of.Possession.Scrum.Attack", "Source.Of.Possession.Turnover.Attack", "Source.Of.Possession.Counter.Attack", "Source.Of.Possession.Quick.Tap.Attack", "Source.Of.Possession.Restart.Reception"),
statNames = c("Lineout", "Scrum", "Turnover", "Counter", "Quick Tap", "Restarts")),
x_lab = "Game", y_lab = "Count",
visCols =  c("#ff8267", "#ef2a00", "#dcdcdc", "#a369ec", "#ffac9a", "#722bb5")),
tooltip = 'text') %>%
# Position legend
layout(legend = list(orientation = "h", xanchor = "center", x = 0.5, y = 1.25)) %>%
# Option to hide plotly logo
config(displaylogo = FALSE)
# Set piece launch quality
ggplotly(lineTrend(df = rbind(formatDf(dt = data,
statTeam = "Canon",
rowStat = "Canon.Lineout.Attack",
nStats = "1st.Phase.Quality.+Ve",
dStats = "1st.Phase.Quality.Strike",
statName = "Lineout",
valType = "percent"),
formatDf(dt = data,
statTeam = "Canon",
rowStat = "Canon.Scrum.Attack",
nStats = "1st.Phase.Quality.+Ve",
dStats = "1st.Phase.Quality.Strike",
statName = "Scrum",
valType = "percent")),
x_lab = "Launch Quality", y_lab = "Percentage (%)", visCols =  c("#a369ec", "#476af6")),
tooltip = 'text') %>%
# Position legend
layout(legend = list(orientation = "h", xanchor = "center", x = 0.5, y = 1.25)) %>%
# Option to hide plotly logo
config(displaylogo = FALSE)
# Ruck to kick ratio
ggplotly(lineTrend(df = formatDfComplexRatio(dt = data,
trendTeam = "Canon",
nrowStat = ".Breakdown",
ncolStats = c("Ruck.Outcome.Ruck.Won", "Ruck.Outcome.Ruck.Lost"),
drowStat = ".Kicking.Game",
dcolStats = c("Half.1st", "Half.2nd"),
statNames = c("rucks", "kicks"),
ratioLab = "Ruck to Kick Ratio"),
x_lab = "", y_lab = "", visCols =  c("#ff8267")),
tooltip = 'text') %>%
# Position legend
layout(legend = list(orientation = "h", xanchor = "center", x = 0.5, y = 1.25)) %>%
# Option to hide plotly logo
config(displaylogo = FALSE)
# Player Tackling
ggplotly(totalFacetTrend(df = rbind(formatDfByPlayer(dt = data,
players = c("Ryota.Suginaga", "Yusuke.Niwai"),
nStats = "Tackle.Outcome.Tackles.Made",
dStats = "Tackle.Type.Tackle.Attempts",
statName = "Tackle Success",
valType = "percent"),
formatDfByPlayer(dt = data,
players = c("Ryota.Suginaga", "Yusuke.Niwai"),
nStats = "1st.Tackle.Gain.Line.Gl.Pos",
dStats = "1st.Tackle.Gain.Line.Gl.Tackle",
statName = "Tackle Contest Gain Line",
valType = "percent"),
formatDfByPlayer(dt = data,
players = c("Ryota.Suginaga", "Yusuke.Niwai"),
nStats = "Tackler.Post.Tackle.Tackler.Slowed.Ball",
dStats = c("Tackler.Post.Tackle.Tackler.Helped.Win.Ball", "Tackler.Post.Tackle.Tackler.Ineffective", "Tackler.Post.Tackle.Tackler.Quick.Ball", "Tackler.Post.Tackle.Tackler.Slowed.Ball", "Tackler.Post.Tackle.Tackler.Won.Ball"),
statName = "Tackle Contest Slowed Ball",
valType = "percent")),
x_lab = "Game", y_lab = "Percent (%)", visCols =  c("#ff8267", "#a369ec"))
)
# Turnover Location
ggplotly(groupBarTrend(df = formatDfByCol(dt = data,
trendTeam = "Canon",
rowStat = ".Breakdown",
colStats = c("Source.Of.Possession.Att.Half", "Source.Of.Possession.Att.22", "Source.Of.Possession.Def.Half", "Source.Of.Possession.Def.22"),
statNames = c("Gold Zone", "Green Zone", "Green Zone-", "Red Zone")),
x_lab = "Turnover Location", y_lab = "Count",
visCols = c("#ffbe7e", "#8bd17e", "#b9b1ac", "#ff9c9a")),
tooltip = 'text') %>%
# Position legend
layout(legend = list(orientation = "h", xanchor = "center", x = 0.5, y = 1.25)) %>%
# Option to hide plotly logo
config(displaylogo = FALSE)
# Ruck to kick ratio in opp half vs. own half
# 1. Pull opp half stats
oppR <- formatDf(dt = data,
statTeam = "Canon",
rowStat = "Canon.Breakdown",
nStats = c("Source.Of.Possession.Att.Half", "Source.Of.Possession.Att.22"),
statName = "Ruck",
xStat = "Opp Half")
oppK <- formatDf(dt = data,
statTeam = "Canon",
rowStat = "Canon.Kicking.Game",
nStats = c("Source.Of.Possession.Zones.Gold.Zone", "Source.Of.Possession.Zones.Green.Zone"),
statName = "Kick",
xStat = "Opp Half")
# 2. Calculate opp half ratio
oppRatio <- round(oppR$val/oppK$val, 1)
# 3. Combine the stats to create the formatted opp half df
oppRK <- rbind(oppR, oppK)
oppRK$ratio <- rep(oppRatio, 2)
# 4. Add the lab to set the tooltip text
oppRK <- oppRK %>% dplyr::mutate(lab = paste("\nRuck to Kick Ratio:", ratio))
# 5. Repeat for own half
teamR <- formatDf(dt = data,
statTeam = "Canon",
rowStat = "Canon.Breakdown",
nStats = c("Source.Of.Possession.Def.Half", "Source.Of.Possession.Def.22"),
statName = "Ruck",
xStat = "Canon Half")
teamK <- formatDf(dt = data,
statTeam = "Canon",
rowStat = "Canon.Kicking.Game",
nStats = c("Source.Of.Possession.Zones.Green-.Zone", "Source.Of.Possession.Zones.Red.Zone"),
statName = "Kick",
xStat = "Canon Half")
teamRatio <- round(teamR$val/teamK$val, 1)
teamRK <- rbind(teamR, teamK)
teamRK$ratio <- rep(teamRatio, 2)
teamRK <- teamRK %>% dplyr::mutate(lab = paste("\nRuck to Kick Ratio:", ratio))
# 6. Plot the combined opp half + own half dataframes
ggplotly(stackGroupTrend(df = rbind(teamRK, oppRK),
x_lab = "Field Zone", y_lab = "", visCols = c("#ff8267", "#a369ec")),
tooltip = 'text') %>%
# Option to position legend
# layout(legend = list(orientation = "h", xanchor = "center", x = 0.5, y = 1.25)) %>%
# Option to hide plotly logo
config(displaylogo = FALSE)
# Try Source
donutDf <- formatDfByCol(dt = data,
trendTeam = "Canon",
rowStat = c("Canon.Try"),
colStats = c("Source.Of.Possession.Lineout.Attack", "Source.Of.Possession.Scrum.Attack", "Source.Of.Possession.Turnover.Attack", "Source.Of.Possession.Counter.Attack", "Source.Of.Possession.Quick.Tap.Attack", "Source.Of.Possession.Restart.Reception"),
statNames = c("Lineout", "Scrum", "Turnover", "Counter", "Quick Tap", "Restarts")) %>%
dplyr::group_by(type) %>%
dplyr::summarize(sum = sum(val))
donutSznSum(df = donutDf,
plot_lab = "Try Source",
visCols =  c("#ff8267", "#ef2a00", "#dcdcdc", "#a369ec", "#ffac9a", "#722bb5"),
themeCol = "#000000", textCol = "#ffffff") %>%
# # Option to position legend
# layout(legend = list(orientation = "h", xanchor = "center", x = 0.5, y = 1.25)) %>%
# Option to hide plotly logo
config(displaylogo = FALSE)
